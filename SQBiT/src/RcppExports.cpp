// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// armaInv
arma::mat armaInv(const arma::mat& x);
RcppExport SEXP _SQBiT_armaInv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(armaInv(x));
    return rcpp_result_gen;
END_RCPP
}
// cppkp
Eigen::MatrixXd cppkp(Eigen::Map<Eigen::MatrixXd> a, Eigen::Map<Eigen::MatrixXd> b);
RcppExport SEXP _SQBiT_cppkp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cppkp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// eigenMatMult
SEXP eigenMatMult(Eigen::MatrixXd A, Eigen::MatrixXd B);
RcppExport SEXP _SQBiT_eigenMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenMapMatMult
SEXP eigenMapMatMult(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _SQBiT_eigenMapMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMapMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenMapMatMult2
SEXP eigenMapMatMult2(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B, int n_cores);
RcppExport SEXP _SQBiT_eigenMapMatMult2(SEXP ASEXP, SEXP BSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMapMatMult2(A, B, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// neg
double neg(double x);
RcppExport SEXP _SQBiT_neg(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(neg(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_cpp
double sum_cpp(NumericVector x);
RcppExport SEXP _SQBiT_sum_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_rhotau
double sum_rhotau(NumericVector x, const double tau);
RcppExport SEXP _SQBiT_sum_rhotau(SEXP xSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_rhotau(x, tau));
    return rcpp_result_gen;
END_RCPP
}
// arma_dist
arma::mat arma_dist(const arma::mat& X);
RcppExport SEXP _SQBiT_arma_dist(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_dist(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SQBiT_armaInv", (DL_FUNC) &_SQBiT_armaInv, 1},
    {"_SQBiT_cppkp", (DL_FUNC) &_SQBiT_cppkp, 2},
    {"_SQBiT_eigenMatMult", (DL_FUNC) &_SQBiT_eigenMatMult, 2},
    {"_SQBiT_eigenMapMatMult", (DL_FUNC) &_SQBiT_eigenMapMatMult, 2},
    {"_SQBiT_eigenMapMatMult2", (DL_FUNC) &_SQBiT_eigenMapMatMult2, 3},
    {"_SQBiT_neg", (DL_FUNC) &_SQBiT_neg, 1},
    {"_SQBiT_sum_cpp", (DL_FUNC) &_SQBiT_sum_cpp, 1},
    {"_SQBiT_sum_rhotau", (DL_FUNC) &_SQBiT_sum_rhotau, 2},
    {"_SQBiT_arma_dist", (DL_FUNC) &_SQBiT_arma_dist, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SQBiT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
